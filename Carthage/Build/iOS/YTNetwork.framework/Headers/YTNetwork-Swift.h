// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import Alamofire;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class TaskDelegate;
@class NSURLSessionTask;
@class NSHTTPURLResponse;
@class NSURLSession;

/**
  Responsible for sending a request and receiving the response and associated data from the server.
*/
SWIFT_CLASS("_TtC9YTNetwork9YTRequest")
@interface YTRequest : NSObject
/**
  The delegate for the underlying task.
*/
@property (nonatomic, readonly, strong) TaskDelegate * _Nonnull delegate;
/**
  The underlying task.
*/
@property (nonatomic, readonly, strong) NSURLSessionTask * _Nullable task;
/**
  The request sent or to be sent to the server.
*/
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable request;
/**
  The response received from the server, if any.
*/
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nullable response;
/**
  The number of times the request has been retried.
*/
@property (nonatomic, readonly) NSUInteger retryCount;
/**
  The session belonging to the underlying task.
*/
@property (nonatomic, readonly, strong) NSURLSession * _Nonnull session;
/**
  Associates an HTTP Basic credential with the request.

  returns:
  The request.
*/
- (nonnull instancetype)authenticate;
/**
  Resumes the request.
*/
- (void)resume;
/**
  Suspends the request.
*/
- (void)suspend;
/**
  Cancels the request.
*/
- (void)cancel;
/**
  The URL path of request. This should only contain the path part of URL, e.g., /v1/user. See alse \code
  baseUrl
  \endcode.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull requestUrl;
/**
  Should use CDN when sending request. default is false
*/
@property (nonatomic, readonly) BOOL useCDN;
/**
  Request base URL, Default is empty string.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
/**
  Request CDN URL. Default is empty string.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull cdnUrl;
/**
  Additional request parameters.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable requestParameters;
/**
  Http Header
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
/**
  The max time duration that cache can stay in disk until itâ€™s considered expired. Default is 0, which means response is not actually saved as cache.
*/
@property (nonatomic, readonly) NSInteger cacheTimeInSeconds;
/**
  Associates an HTTP Basic credential with the request, The user.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull user;
/**
  Associates an HTTP Basic credential with the request, The password.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull password;
/**
  Associates an HTTP Basic credential with the request, The URL credential persistence. \code
  .ForSession
  \endcode by default.
*/
@property (nonatomic, readonly) NSURLCredentialPersistence persistence;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSProgress;
@class OS_dispatch_queue;

SWIFT_CLASS("_TtC9YTNetwork13YTDataRequest")
@interface YTDataRequest : YTRequest
/**
  The request sent or to be sent to the server.
*/
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable request;
/**
  The progress of fetching the response data from the server for the request.
*/
@property (nonatomic, readonly, strong) NSProgress * _Nonnull progress;
/**
  Sets a closure to be called periodically during the lifecycle of the request as data is read from the server.
  This closure returns the bytes most recently received from the server, not including data from previous calls.
  If this closure is set, data will only be available within this closure, and will not be saved elsewhere. It is
  also important to note that the server data in any \code
  Response
  \endcode object will be \code
  nil
  \endcode.
  \param closure The code to be executed periodically during the lifecycle of the request.


  returns:
  The request.
*/
- (nonnull instancetype)streamWithClosure:(void (^ _Nullable)(NSData * _Nonnull))closure;
/**
  Sets a closure to be called periodically during the lifecycle of the \code
  Request
  \endcode as data is read from the server.
  \param queue The dispatch queue to execute the closure on.

  \param closure The code to be executed periodically as data is read from the server.


  returns:
  The request.
*/
- (nonnull instancetype)downloadProgressWithQueue:(OS_dispatch_queue * _Nonnull)queue closure:(void (^ _Nonnull)(NSProgress * _Nonnull))closure;
/**
  The queue on which the completion handler is dispatched. default is nil.
*/
@property (nonatomic, strong) OS_dispatch_queue * _Nullable responseQueue;
/**
  The JSON serialization reading options. Defaults to \code
  .allowFragments
  \endcode.
*/
@property (nonatomic, readonly) NSJSONReadingOptions responseJSONOptions;
/**
  The property list reading options. Defaults to \code
  []
  \endcode.
*/
@property (nonatomic, readonly) NSPropertyListReadOptions responsePropertyListOptions;
/**
  The key path where object mapping should be performed
*/
@property (nonatomic, readonly, copy) NSString * _Nullable responseObjectKeyPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
/**
  Validates that the response has a status code in the default acceptable range of 200â€¦299, and that the content
  type matches any specified in the Accept HTTP header field.
  If validation fails, subsequent calls to response handlers will have an associated error.

  returns:
  The request.
*/
- (nonnull instancetype)validate;
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDataRequest (SWIFT_EXTENSION(YTNetwork))
@end


SWIFT_CLASS("_TtC9YTNetwork17YTDownloadRequest")
@interface YTDownloadRequest : YTRequest
/**
  The request sent or to be sent to the server.
*/
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable request;
/**
  The progress of downloading the response data from the server for the request.
*/
@property (nonatomic, readonly, strong) NSProgress * _Nonnull progress;
/**
  Cancels the request.
*/
- (void)cancel;
/**
  Sets a closure to be called periodically during the lifecycle of the \code
  Request
  \endcode as data is read from the server.
  \param queue The dispatch queue to execute the closure on.

  \param closure The code to be executed periodically as data is read from the server.


  returns:
  The request.
*/
- (nonnull instancetype)downloadProgressWithQueue:(OS_dispatch_queue * _Nonnull)queue closure:(void (^ _Nonnull)(NSProgress * _Nonnull))closure;
/**
  The queue on which the completion handler is dispatched. default is nil.
*/
@property (nonatomic, readonly, strong) OS_dispatch_queue * _Nullable downloadQueue;
/**
  The JSON serialization reading options. Defaults to \code
  .allowFragments
  \endcode.
*/
@property (nonatomic, readonly) NSJSONReadingOptions downloadJSONOptions;
/**
  The property list reading options. Defaults to \code
  []
  \endcode.
*/
@property (nonatomic, readonly) NSPropertyListReadOptions downloadPropertyListOptions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface YTDownloadRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDownloadRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDownloadRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDownloadRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDownloadRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDownloadRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTDownloadRequest (SWIFT_EXTENSION(YTNetwork))
/**
  Validates that the response has a status code in the default acceptable range of 200â€¦299, and that the content
  type matches any specified in the Accept HTTP header field.
  If validation fails, subsequent calls to response handlers will have an associated error.

  returns:
  The request.
*/
- (nonnull instancetype)validate;
@end



@interface YTRequest (SWIFT_EXTENSION(YTNetwork))
/**
  The textual representation used when written to an output stream, which includes the HTTP method and URL, as
  well as the response status code if a response has been received.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface YTRequest (SWIFT_EXTENSION(YTNetwork))
/**
  The textual representation used when written to an output stream, in the form of a cURL command.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface YTRequest (SWIFT_EXTENSION(YTNetwork))
@end


SWIFT_CLASS("_TtC9YTNetwork15YTStreamRequest")
@interface YTStreamRequest : YTRequest
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface YTStreamRequest (SWIFT_EXTENSION(YTNetwork))
@end


SWIFT_CLASS("_TtC9YTNetwork15YTUploadRequest")
@interface YTUploadRequest : YTDataRequest
/**
  The request sent or to be sent to the server.
*/
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable request;
/**
  The progress of uploading the payload to the server for the upload request.
*/
@property (nonatomic, readonly, strong) NSProgress * _Nonnull uploadProgress;
/**
  Sets a closure to be called periodically during the lifecycle of the \code
  UploadRequest
  \endcode as data is sent to
  the server.
  After the data is sent to the server, the \code
  progress(queue:closure:)
  \endcode APIs can be used to monitor the progress
  of data being read from the server.
  \param queue The dispatch queue to execute the closure on.

  \param closure The code to be executed periodically as data is sent to the server.


  returns:
  The request.
*/
- (nonnull instancetype)uploadProgressWithQueue:(OS_dispatch_queue * _Nonnull)queue closure:(void (^ _Nonnull)(NSProgress * _Nonnull))closure;
/**
  The encoding memory threshold in bytes.
*/
@property (nonatomic, readonly) uint64_t encodingMemoryThreshold;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface YTUploadRequest (SWIFT_EXTENSION(YTNetwork))
@end


@interface YTUploadRequest (SWIFT_EXTENSION(YTNetwork))
@end

#pragma clang diagnostic pop
